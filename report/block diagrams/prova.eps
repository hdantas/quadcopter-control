%!PS-Adobe-2.0 EPSF-2.0
%%Title: prova.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5a
%%CreationDate: Tue Apr  3 16:30:05 2012
%%BoundingBox: 0 0 697 535
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.776 0.718 0.592 srgb} bind def
/col33 {0.937 0.973 1.000 srgb} bind def
/col34 {0.863 0.796 0.651 srgb} bind def
/col35 {0.251 0.251 0.251 srgb} bind def
/col36 {0.502 0.502 0.502 srgb} bind def
/col37 {0.753 0.753 0.753 srgb} bind def
/col38 {0.878 0.878 0.878 srgb} bind def
/col39 {0.557 0.561 0.557 srgb} bind def
/col40 {0.667 0.667 0.667 srgb} bind def
/col41 {0.333 0.333 0.333 srgb} bind def
/col42 {0.780 0.765 0.780 srgb} bind def
/col43 {0.337 0.318 0.318 srgb} bind def
/col44 {0.557 0.557 0.557 srgb} bind def
/col45 {0.843 0.843 0.843 srgb} bind def
/col46 {0.522 0.502 0.490 srgb} bind def
/col47 {0.824 0.824 0.824 srgb} bind def
/col48 {0.227 0.227 0.227 srgb} bind def
/col49 {0.271 0.451 0.667 srgb} bind def
/col50 {0.682 0.682 0.682 srgb} bind def
/col51 {0.482 0.475 0.647 srgb} bind def
/col52 {0.267 0.267 0.267 srgb} bind def
/col53 {0.451 0.459 0.549 srgb} bind def
/col54 {0.969 0.969 0.969 srgb} bind def
/col55 {0.255 0.271 0.255 srgb} bind def
/col56 {0.388 0.365 0.808 srgb} bind def
/col57 {0.745 0.745 0.745 srgb} bind def
/col58 {0.318 0.318 0.318 srgb} bind def
/col59 {0.906 0.890 0.906 srgb} bind def
/col60 {0.000 0.000 0.286 srgb} bind def
/col61 {0.475 0.475 0.475 srgb} bind def
/col62 {0.188 0.204 0.188 srgb} bind def
/col63 {0.255 0.255 0.255 srgb} bind def
/col64 {0.780 0.714 0.588 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 535 moveto 0 0 lineto 697 0 lineto 697 535 lineto closepath clip newpath
-1.9 579.0 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 10
% Ellipse
7.500 slw
n 2205 7785 242 242 0 360 DrawEllipse gs col0 s gr

% Polyline
0 slj
0 slc
n 1350 2385 m 2970 2385 l 2970 3285 l 1350 3285 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 1170 2565 m 2790 2565 l 2790 3465 l 1170 3465 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 990 2700 m 2610 2700 l 2610 3600 l 990 3600 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
833 2913 m 1005 2913 l 1005 2846 l 833 2846 l 833 2846 l 983 2880 l 833 2913 l cp
eoclip
n 90 2880 m
 990 2880 l gs col0 s gr gr

% arrowhead
3.000 slw
n 833 2913 m 983 2880 l 833 2846 l 863 2880 l 833 2913 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 630 3420 m
 630 4320 l gs col0 s gr 
% Polyline
gs  clippath
833 3453 m 1005 3453 l 1005 3386 l 833 3386 l 833 3386 l 983 3420 l 833 3453 l cp
eoclip
n 630 3420 m
 990 3420 l gs col0 s gr gr

% arrowhead
3.000 slw
n 833 3453 m 983 3420 l 833 3386 l 863 3420 l 833 3453 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 2970 2835 m 3780 2835 l
 3870 2835 l gs col0 s gr 
% Polyline
n 2790 3015 m 3690 3015 l
 3735 3015 l gs col0 s gr 
% Polyline
n 2610 3150 m
 3600 3150 l gs col0 s gr 
% Polyline
gs  clippath
3983 2868 m 4155 2868 l 4155 2801 l 3983 2801 l 3983 2801 l 4133 2835 l 3983 2868 l cp
eoclip
n 3870 2835 m
 4140 2835 l gs col0 s gr gr

% arrowhead
3.000 slw
n 3983 2868 m 4133 2835 l 3983 2801 l 4013 2835 l 3983 2868 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
gs  clippath
3983 3048 m 4155 3048 l 4155 2981 l 3983 2981 l 3983 2981 l 4133 3015 l 3983 3048 l cp
eoclip
n 3735 3015 m
 4140 3015 l gs col0 s gr gr

% arrowhead
3.000 slw
n 3983 3048 m 4133 3015 l 3983 2981 l 4013 3015 l 3983 3048 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
gs  clippath
3983 3183 m 4155 3183 l 4155 3116 l 3983 3116 l 3983 3116 l 4133 3150 l 3983 3183 l cp
eoclip
n 3600 3150 m
 4140 3150 l gs col0 s gr gr

% arrowhead
3.000 slw
n 3983 3183 m 4133 3150 l 3983 3116 l 4013 3150 l 3983 3183 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
15.000 slw
n 4140 2610 m
 4140 3420 l gs col0 s gr 
% Polyline
7.500 slw
gs  clippath
4703 3048 m 4875 3048 l 4875 2981 l 4703 2981 l 4703 2981 l 4853 3015 l 4703 3048 l cp
eoclip
n 4140 3015 m
 4860 3015 l gs col0 s gr gr

% arrowhead
3.000 slw
n 4703 3048 m 4853 3015 l 4703 2981 l 4733 3015 l 4703 3048 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 9495 3015 m
 10350 3015 l gs col0 s gr 
% Polyline
gs  clippath
10913 3048 m 11085 3048 l 11085 2981 l 10913 2981 l 10913 2981 l 11063 3015 l 10913 3048 l cp
eoclip
n 10350 3015 m
 11070 3015 l gs col0 s gr gr

% arrowhead
3.000 slw
n 10913 3048 m 11063 3015 l 10913 2981 l 10943 3015 l 10913 3048 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 4860 2565 m 6480 2565 l 6480 3465 l 4860 3465 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 7875 2565 m 9495 2565 l 9495 3465 l 7875 3465 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
7718 3048 m 7890 3048 l 7890 2981 l 7718 2981 l 7718 2981 l 7868 3015 l 7718 3048 l cp
eoclip
n 7155 3015 m
 7875 3015 l gs col0 s gr gr

% arrowhead
3.000 slw
n 7718 3048 m 7868 3015 l 7718 2981 l 7748 3015 l 7718 3048 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 7155 3015 m
 6480 3015 l gs col0 s gr 
% Polyline
n 9495 5490 m 7875 5490 l 7875 6390 l 9495 6390 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
6637 5906 m 6465 5906 l 6465 5973 l 6637 5973 l 6637 5973 l 6487 5940 l 6637 5906 l cp
eoclip
n 7200 5940 m
 6480 5940 l gs col0 s gr gr

% arrowhead
3.000 slw
n 6637 5906 m 6487 5940 l 6637 5973 l 6607 5940 l 6637 5906 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
n 7200 5940 m
 7875 5940 l gs col0 s gr 
% Polyline
n 9495 5940 m 10350 5940 l
 10350 3015 l gs col0 s gr 
% Polyline
n 4860 5940 m
 2160 5940 l gs col0 s gr 
% Polyline
n 2160 5940 m 630 5940 l
 630 4275 l gs col0 s gr 
% Polyline
n 6480 5490 m 4860 5490 l 4860 6390 l 6480 6390 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
1 slj
n 7650 7290 m 7380 7290 7380 7740 270 arcto 4 {pop} repeat
  7380 8010 9630 8010 270 arcto 4 {pop} repeat
  9900 8010 9900 7560 270 arcto 4 {pop} repeat
  9900 7290 7650 7290 270 arcto 4 {pop} repeat
 cp gs /PC [[0.67 0.67 0.67] [0.67 0.67 0.67]] def
15.00 15.00 sc P1 [16 0 0 -8 492.00 486.00] PATmp PATsp ef gr PATusp gs col40 s gr 
% Polyline
n 1170 720 m 900 720 900 1170 270 arcto 4 {pop} repeat
  900 1440 3150 1440 270 arcto 4 {pop} repeat
  3420 1440 3420 990 270 arcto 4 {pop} repeat
  3420 720 1170 720 270 arcto 4 {pop} repeat
 cp gs /PC [[0.67 0.67 0.67] [0.67 0.67 0.67]] def
15.00 15.00 sc P1 [16 0 0 -8 60.00 48.00] PATmp PATsp ef gr PATusp gs col40 s gr 
% Polyline
gs  clippath
8718 6547 m 8718 6375 l 8651 6375 l 8651 6547 l 8651 6547 l 8685 6397 l 8718 6547 l cp
eoclip
n 8685 6390 m
 8685 7335 l gs col0 s gr gr

% arrowhead
0 slj
3.000 slw
n 8718 6547 m 8685 6397 l 8651 6547 l 8685 6517 l 8718 6547 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
1 slj
7.500 slw
gs  clippath
2126 2228 m 2126 2400 l 2193 2400 l 2193 2228 l 2193 2228 l 2160 2378 l 2126 2228 l cp
eoclip
n 2160 1440 m
 2160 2385 l gs col0 s gr gr

% arrowhead
0 slj
3.000 slw
n 2126 2228 m 2160 2378 l 2193 2228 l 2160 2258 l 2126 2228 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
1 slj
7.500 slw
n 4815 720 m 4545 720 4545 1170 270 arcto 4 {pop} repeat
  4545 1440 6795 1440 270 arcto 4 {pop} repeat
  7065 1440 7065 990 270 arcto 4 {pop} repeat
  7065 720 4815 720 270 arcto 4 {pop} repeat
 cp gs /PC [[0.67 0.67 0.67] [0.67 0.67 0.67]] def
15.00 15.00 sc P1 [16 0 0 -8 303.00 48.00] PATmp PATsp ef gr PATusp gs col40 s gr 
% Polyline
gs  clippath
5636 2408 m 5636 2580 l 5703 2580 l 5703 2408 l 5703 2408 l 5670 2558 l 5636 2408 l cp
eoclip
n 5670 1440 m
 5670 2565 l gs col0 s gr gr

% arrowhead
0 slj
3.000 slw
n 5636 2408 m 5670 2558 l 5703 2408 l 5670 2438 l 5636 2408 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
1 slj
7.500 slw
gs  clippath
1806 7818 m 1978 7818 l 1978 7751 l 1806 7751 l 1806 7751 l 1956 7785 l 1806 7818 l cp
eoclip
n 1963 7785 m
 1350 7785 l gs col0 s gr gr

% arrowhead
0 slj
3.000 slw
n 1806 7818 m 1956 7785 l 1806 7751 l 1836 7785 l 1806 7818 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
1 slj
7.500 slw
gs  clippath
2238 8184 m 2238 8012 l 2171 8012 l 2171 8184 l 2171 8184 l 2205 8034 l 2238 8184 l cp
eoclip
n 2205 8027 m
 2205 9180 l gs col0 s gr gr

% arrowhead
0 slj
3.000 slw
n 2238 8184 m 2205 8034 l 2171 8184 l 2205 8154 l 2238 8184 l 
 cp gs 0.00 setgray ef gr  col0 s
/Times-Roman ff 190.50 scf sf
45 2745 m
gs 1 -1 sc (Reference) col0 sh gr
/Times-Roman ff 285.75 scf sf
1215 3240 m
gs 1 -1 sc (Control\(s\)) col0 sh gr
/Times-Roman ff 285.75 scf sf
8370 3105 m
gs 1 -1 sc (Plant) col0 sh gr
/Times-Roman ff 285.75 scf sf
5175 3105 m
gs 1 -1 sc (Actuator) col0 sh gr
/Times-Roman ff 285.75 scf sf
8235 5985 m
gs 1 -1 sc (Sensors) col0 sh gr
/Times-Roman ff 285.75 scf sf
5040 6210 m
gs 1 -1 sc (processing) col0 sh gr
/Times-Roman ff 285.75 scf sf
5310 5850 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman ff 190.50 scf sf
2970 5760 m
gs 1 -1 sc (Measurement) col0 sh gr
/Times-Roman ff 190.50 scf sf
9990 2790 m
gs 1 -1 sc (Output) col0 sh gr
/Times-Roman ff 285.75 scf sf
7965 7650 m
gs 1 -1 sc (yep) col0 sh gr
/Times-Roman ff 285.75 scf sf
1125 990 m
gs 1 -1 sc (Controller criteria) col0 sh gr
/Times-Roman ff 285.75 scf sf
1710 1305 m
gs 1 -1 sc (criteria) col0 sh gr
/Times-Roman ff 285.75 scf sf
5175 1305 m
gs 1 -1 sc (rate limits) col0 sh gr
/Times-Roman ff 285.75 scf sf
4905 990 m
gs 1 -1 sc (Magnitude and ) col0 sh gr
/Times-Roman ff 285.75 scf sf
2115 7875 m
gs 1 -1 sc (+) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
